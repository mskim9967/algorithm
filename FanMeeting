//solving

import java.io.*;
import java.util.*;

public class Main {
    int[] member, fan;
    
    Main(BufferedReader br) throws Exception {
        String line = br.readLine();
        member = new int[line.length()];
        for(int i = 0; i < member.length; i++)
            member[member.length - 1 - i] = line.charAt(i) == 'F' ? 0 : 1;
        line = br.readLine();
        fan = new int[line.length()];
        for(int i = 0; i < fan.length; i++)
            fan[i] = line.charAt(i) == 'F' ? 0 : 1;

    }
    
    int count_hug() {
        int ret = 0;
        Karatsuba k = new Karatsuba(fan, member);
        int[] res = k.karatsuba(k.a, k.b);
        
        for(int i = member.length - 1; i < fan.length; i++)
            if(res[i] == 0) ret++;
        return ret;
    }
    
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        int testCase = Integer.parseInt(br.readLine());
        for(int i = 0; i < testCase; i++) {
            Main f = new Main(br);
            bw.write(f.count_hug() + "\n");
        }
        bw.flush();
        bw.close();
        br.close();
    }
}


class Karatsuba{
    int[] a, b;

    Karatsuba(int[] aa, int[] bb) {
        a = aa;
        b = bb;
    }
 
    int[] karatsuba(int[] a, int[] b) {
        if(isBigger(b, a)) {
            int[] temp = a;
            a = b;
            b = temp;
        }
        
        if(a.length + b.length < 500)
            return multiple(a, b);

        int mid = a.length / 2;
        
        int[] a0, a1, b0, b1;
        a0 = new int[mid];
        a1 = new int[a.length - mid];
        b0 = new int[mid < b.length ? mid : b.length];
        b1 = new int[mid < b.length ? b.length - mid : 0];
        
        System.arraycopy(a, 0, a0, 0, a0.length);
        System.arraycopy(a, mid, a1, 0, a1.length);
        System.arraycopy(b, 0, b0, 0, b0.length);
        System.arraycopy(b, mid < b.length ? mid : 0, b1, 0, b1.length);

        int[] z0 = karatsuba(a0, b0);
        int[] z2 = karatsuba(a1, b1);
        int[] z1 = minus(karatsuba(plus(a0, a1), plus(b0, b1)), plus(z0, z2));
        return plus(plus(shift(z2, mid * 2), shift(z1, mid)), z0);
    }
    
    boolean isBigger(int[] a, int[] b) {
        if(a.length < b.length) return false;
        if(a.length > b.length) return true;
        for(int i = a.length - 1; i >= 0; i--)
            if(a[i] < b[i]) return false;
        return true;
    }
 
    int[] multiple(int[] a, int[] b) {
        if(a.length * b.length == 0)    return new int[0];
        int[] ret = new int[a.length];
        for(int i = 0; i < ret.length; i++)
            ret[i] = a[i] * b[0];
        
        for(int i = 1; i < b.length; i++) {
            int[] temp = new int[a.length];
            for(int j = 0; j < a.length; j++) {
                temp[j] = a[j] * b[i]; 
            }
            temp = shift(temp, i);
            ret = plus(temp, ret);
        }
        return ret;
    }
    
    int[] plus(int[] a, int[] b) {
        if(isBigger(b, a)) {
            int[] temp = a;
            a = b;
            b = temp;
        }

        int[] ret = new int[a.length];
        System.arraycopy(a, 0, ret, 0, ret.length);
        for(int i = 0; i < b.length; i++) 
            ret[i] += b[i];
        return ret;
    }
    
    int[] minus(int[] a, int[] b) {
        int[] ret = new int[a.length];
        System.arraycopy(a, 0, ret, 0, ret.length);
        for(int i = 0; i < b.length; i++) 
            ret[i] -= b[i];
        return ret;
    }
    
  
    int[] shift(int[] a, int n) {
        int[] ret = new int[a.length + n];
        System.arraycopy(a, 0, ret, n, a.length);
        for(int i = 0; i < n; i++)   ret[i] = 0;
        return ret;
    }
}
